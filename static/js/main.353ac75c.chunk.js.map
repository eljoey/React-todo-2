{"version":3,"sources":["components/ProjectContext.js","components/AddProject.js","components/Projects.js","components/AddTodo.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["initialState","projects","id","name","todos","content","curProjID","localState","JSON","parse","localStorage","getItem","ProjectContext","createContext","ProjectProvider","props","useState","setProjects","useEffect","setItem","stringify","Provider","value","children","AddProject","setName","useContext","onSubmit","e","preventDefault","newID","prevProjects","type","placeholder","onChange","target","Projects","projectList","length","map","project","key","className","onClick","proj","validProjects","filter","check","delProject","AddTodo","setContent","shortid","generate","index","indexOf","push","Todos","projectTodos","todo","clickedTodo","filteredTodos","delTodo","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.353ac75c.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\n\nconst initialState = {\n  projects: [\n    {\n      id: 0,\n      name: \"DailyDo's\",\n      todos: [\n        { id: 1, content: 'Wake up' },\n        { id: 2, content: 'Odin Project' },\n        { id: 3, content: 'Sleep' }\n      ]\n    },\n    {\n      id: 1,\n      name: \"WeeklyDo's\",\n      todos: [\n        { id: 1, content: 'Finish Project' },\n        { id: 2, content: 'Find New Project' },\n        { id: 3, content: 'Start New Project' }\n      ]\n    }\n  ],\n  curProjID: 0,\n  id: 1\n};\n\nconst localState = JSON.parse(localStorage.getItem('projects'));\n\nexport const ProjectContext = createContext();\n\nexport const ProjectProvider = props => {\n  //loads local storage first if none then will load initial state from above\n  const [projects, setProjects] = useState(localState || initialState);\n\n  //stores projects to local storage(will update every time state changes)\n  useEffect(() => {\n    localStorage.setItem('projects', JSON.stringify(projects));\n  }, [projects]);\n\n  return (\n    <ProjectContext.Provider value={[projects, setProjects]}>\n      {props.children}\n    </ProjectContext.Provider>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport { ProjectContext } from './ProjectContext';\n\nconst AddProject = () => {\n  const [name, setName] = useState('');\n  const [projects, setProjects] = useContext(ProjectContext);\n\n  const updateName = e => {\n    setName(e.target.value);\n  };\n\n  const newProject = e => {\n    e.preventDefault();\n    if (name === '') return;\n    let newID = projects.id + 1;\n\n    setProjects(prevProjects => ({\n      projects: [\n        ...prevProjects.projects,\n        { id: newID, name: name, todos: [] }\n      ],\n      curProjID: newID,\n\n      id: newID\n    }));\n    setName('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={newProject}>\n        <input\n          type=\"text\"\n          placeholder=\"Add a Project.\"\n          value={name}\n          onChange={updateName}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default AddProject;\n","import React, { useContext } from 'react';\nimport { ProjectContext } from './ProjectContext';\nimport AddProject from './AddProject';\n\nconst Projects = () => {\n  const [projects, setProjects] = useContext(ProjectContext);\n\n  const selectProject = proj => {\n    setProjects(prevProjects => ({\n      projects: [...prevProjects.projects],\n      curProjID: proj.id,\n      id: prevProjects.id\n    }));\n  };\n\n  const delProject = proj => {\n    let validProjects = projects.projects.filter(\n      project => project.id !== proj.id\n    );\n\n    let check = projects.curProjID;\n\n    //If currently selected Project gets deleted it will default to the first project\n    if (proj.id === projects.curProjID) {\n      check = validProjects[0].id;\n    } else {\n      check = projects.curProjID;\n    }\n\n    setProjects(prevProjects => ({\n      projects: [...validProjects],\n      curProjID: check,\n      id: prevProjects.id\n    }));\n  };\n\n  const projectList = projects.projects.length ? (\n    projects.projects.map(project => {\n      return (\n        <div key={project.id} className=\"projects-info\">\n          <div\n            className=\"projName\"\n            onClick={() => {\n              selectProject(project);\n            }}\n          >\n            {project.name}\n          </div>\n          <i\n            className=\"fas fa-trash\"\n            onClick={() => {\n              delProject(project);\n            }}\n          />\n        </div>\n      );\n    })\n  ) : (\n    <p>You have no Projects! Add more in the form above.</p>\n  );\n\n  return (\n    <div className=\"projects\">\n      <h1>Projects</h1>\n      <AddProject />\n      <div className=\"proj-list\">{projectList}</div>\n    </div>\n  );\n};\n\nexport default Projects;\n","import React, { useState, useContext } from 'react';\nimport { ProjectContext } from './ProjectContext';\nimport shortid from 'shortid';\n\nconst AddTodo = () => {\n  const [content, setContent] = useState('');\n  const [projects, setProjects] = useContext(ProjectContext);\n\n  const updateContent = e => {\n    setContent(e.target.value);\n  };\n\n  const newTodo = e => {\n    e.preventDefault();\n    if (content === '') return;\n    let newID = shortid.generate();\n\n    //index of selected project\n    let index = projects.projects\n      .map(project => {\n        return project.id;\n      })\n      .indexOf(projects.curProjID);\n\n    projects.projects[index].todos.push({\n      id: newID,\n      content: content\n    });\n\n    setProjects(prevProjects => ({\n      projects: [...prevProjects.projects],\n      curProjID: prevProjects.curProjID,\n      id: prevProjects.id\n    }));\n\n    setContent('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={newTodo}>\n        <input\n          type=\"text\"\n          placeholder=\"Add a Todo to your Project.\"\n          value={content}\n          onChange={updateContent}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React, { useContext } from 'react';\nimport { ProjectContext } from './ProjectContext';\nimport AddTodo from './AddTodo';\n\nconst Todos = () => {\n  const [projects, setProjects] = useContext(ProjectContext);\n\n  //index of selected project\n  const index = projects.projects\n    .map(project => {\n      return project.id;\n    })\n    .indexOf(projects.curProjID);\n\n  const delTodo = clickedTodo => {\n    //filters out deleted todo\n    const filteredTodos = projects.projects[index].todos.filter(\n      todo => todo.id !== clickedTodo.id\n    );\n\n    //set filteredTodos to be new info\n    projects.projects[index].todos = filteredTodos;\n\n    setProjects(prevProjects => ({\n      projects: [...prevProjects.projects],\n      curProjID: prevProjects.curProjID,\n      id: prevProjects.id\n    }));\n  };\n\n  const projectTodos = projects.projects[index].todos.length ? (\n    projects.projects[index].todos.map(todo => {\n      return (\n        <div key={todo.id}>\n          <div className=\"todos\">\n            {todo.content}\n            <i\n              className=\"fas fa-trash\"\n              onClick={() => {\n                delTodo(todo);\n              }}\n            />\n          </div>\n        </div>\n      );\n    })\n  ) : (\n    <p>This project has no Todos. Use the form above to add some! </p>\n  );\n\n  return (\n    <div className=\"curProject\">\n      <h1>{projects.projects[index].name}</h1>\n      <AddTodo />\n      <div className=\"todo-container\">{projectTodos}</div>\n    </div>\n  );\n};\n\nexport default Todos;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Projects from './components/Projects';\nimport Todos from './components/Todos';\nimport { ProjectProvider } from './components/ProjectContext';\n\nclass App extends Component {\n  render() {\n    return (\n      <ProjectProvider>\n        <div className=\"App\">\n          <Projects />\n          <Todos />\n        </div>\n      </ProjectProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}